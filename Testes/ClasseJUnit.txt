public class JulgamentoPrisioneiro {
	private int PENA_INOCENCIA = 10;
	private int PENA_CONDENACAO_MUTUA = 15;
	private int PENA_CONDENACAO_INDIVIDUAL = 10;
	private int PENA_CONDENACAO_CUMPLICES = 11;
	
	public int calculaPena(Resposta respostaPrisioneiroA, Resposta respostaPrisioneiroB) {
		if (respostaPrisioneiroA == Resposta.DELACAO) {
			if (respostaPrisioneiroB == Resposta.DELACAO) {
				return PENA_CONDENACAO_MUTUA;
			} else {
				return PENA_INOCENCIA;
			}
		} else {
			if (respostaPrisioneiroB == Resposta.DELACAO) {
				return PENA_CONDENACAO_INDIVIDUAL;
			} else {
				return PENA_CONDENACAO_CUMPLICES;
			}
		}
	}
}

package prisioneiros;

public enum Resposta{
	NEGACAO, DELACAO
}

package prisioneiros;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import org.junit.Test;

public class JulgamentoPrisioneiroTest {

	@Test
	public void testCenario1() {
		Resposta respSuspeitoA = Resposta.DELACAO;
		Resposta respSuspeitoB = Resposta.DELACAO;
		
		JulgamentoPrisioneiro jp = new JulgamentoPrisioneiro();
		assertNotNull(jp);
		
		int penaSuspeitoA = jp.calculaPena(respSuspeitoA, respSuspeitoB);
		int penaSuspeitoB = jp.calculaPena(respSuspeitoB, respSuspeitoA);
		
		assertEquals(15, penaSuspeitoA);
		assertEquals(15, penaSuspeitoB);
			
	}

	@Test
	public void testCenario2() {
		Resposta respSuspeitoA = Resposta.DELACAO;
		Resposta respSuspeitoB = Resposta.DELACAO;
		
		JulgamentoPrisioneiro jp = new JulgamentoPrisioneiro();
		assertNotNull(jp);
		
		int penaSuspeitoA = jp.calculaPena(respSuspeitoA, respSuspeitoB);
		int penaSuspeitoB = jp.calculaPena(respSuspeitoB, respSuspeitoA);
		
		assertEquals(10, penaSuspeitoA);
		assertEquals(15, penaSuspeitoB);
		
	}


}

Observações: Testes de outro Cenarios em execução com erro (penaSuspeitoA!=15 && penaSuspeitoB==15).

Rm: 80639   
Nome: Bruno Assis